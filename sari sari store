// problems: ig click sa back button, di mu back tas di mu show ang product sa cart

import javax.swing.*;
import javax.swing.border.EmptyBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

public class ConvenienceStoreSystem {
    private static JFrame mainFrame;
    private static JPanel mainPanel;
    private static CardLayout cardLayout;
    private static final String USERS_FILE_PATH = "users.txt";
    private static final String PRODUCTS_FILE_PATH = "products.txt";
    private static List<String> cartProducts = new ArrayList<>();
    private static String currentUsername;
    private static List<String> selectedProducts = new ArrayList<>();
    private static JTextField transactionIdField;
    private static JTextField fullNameField;
    private static JTextField totalPriceField;
    private static JPanel checkBoxPanel;
    private static JScrollPane checkBoxScrollPane; 
    private static List<JCheckBox> checkBoxes = new ArrayList<>();
    private static String currentPanelName;
    private static List<String> registeredUsers = new ArrayList<>();
    private static List<String> allProducts = new ArrayList<>();
    

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> createAndShowGUI());
    }

    private static void createAndShowGUI() {
        Color bgColor = new Color(141, 203, 238);
        mainFrame = new JFrame("Convenience Store System");
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);  
        mainPanel = new JPanel();
        cardLayout = new CardLayout();
        mainPanel.setLayout(cardLayout);
        mainPanel.setBackground(bgColor);

        createLoginPanel();
        createRegistrationPanel();
        createMainMenuPanel();
        createAddProductPanel();
        createTransactionPanel();

        mainFrame.add(mainPanel);
        mainFrame.setSize(700, 500);
        mainFrame.setLocationRelativeTo(null);
        mainFrame.setVisible(true);
    }
    
     private static void showCard(String panelName) {
          cardLayout.show(mainPanel, panelName);
          currentPanelName = panelName;
      }
      
      private static boolean isCurrentPanel(String panelName) {
          return currentPanelName != null && currentPanelName.equals(panelName);
      }

    private static void createLoginPanel() {
        Color bgColor = new Color(141, 203, 238);
        ImageIcon logo = new ImageIcon("logo.png");
        JLabel logoLabel = new JLabel(logo);

        JPanel loginPanel = new JPanel();
        loginPanel.setLayout(new BoxLayout(loginPanel, BoxLayout.Y_AXIS));
        loginPanel.setBackground(bgColor);

        JPanel logoContainer = new JPanel();
        logoContainer.add(logoLabel);
        logoContainer.setBackground(bgColor);

        JPanel inputPanel = new JPanel();
        inputPanel.setLayout(new GridLayout(3, 2, 10, 10));
        inputPanel.setBackground(bgColor);

        JLabel usernameLabel = new JLabel("Username:");
        JTextField usernameField = new JTextField();
        JLabel passwordLabel = new JLabel("Password:");
        JPasswordField passwordField = new JPasswordField();

        // Adjust these values as needed for your desired margins
        int topMargin = 10;
        int leftMargin = 50; // Set left margin for labels
        int bottomMargin = 10;
        int rightMargin = 50; // Set right margin for text fields

        // Creating empty borders for labels and text fields
        EmptyBorder labelBorder = new EmptyBorder(topMargin, leftMargin, bottomMargin, 0);
        EmptyBorder fieldBorder = new EmptyBorder(topMargin, 0, bottomMargin, rightMargin);

        // Applying borders to the labels and text fields
        usernameLabel.setBorder(labelBorder);
        passwordLabel.setBorder(labelBorder);
        usernameField.setBorder(fieldBorder);
        passwordField.setBorder(fieldBorder);

        inputPanel.add(usernameLabel);
        inputPanel.add(usernameField);
        inputPanel.add(passwordLabel);
        inputPanel.add(passwordField);

        JButton loginButton = new JButton("Login");
        JButton registerButton = new JButton("Register"); 

       loginButton.addActionListener(new ActionListener() {
          @Override
          public void actionPerformed(ActionEvent e) {
              String username = usernameField.getText();
              String password = new String(passwordField.getPassword());
      
              if (authenticateUser(username, password)) {
                  // Successful login
                  currentUsername = username;
                  cardLayout.show(mainPanel, "MainMenu"); // Switch to the main menu panel
              } else {
                  // Failed login attempt
                  JOptionPane.showMessageDialog(mainFrame, "Invalid username or password.");
                  usernameField.setText("");
                  passwordField.setText("");
              }
          }
      });
   
       registerButton.addActionListener(new ActionListener() {
    @Override
    public void actionPerformed(ActionEvent e) {
        cardLayout.show(mainPanel, "Register"); // Switch to the registration panel
    }
});
   
       JPanel buttonPanel = new JPanel();
       buttonPanel.setBackground(bgColor);
       buttonPanel.add(loginButton);
       buttonPanel.add(registerButton);
   
       loginPanel.add(Box.createVerticalStrut(20)); // Add space at the top
       logoContainer.setAlignmentX(Component.CENTER_ALIGNMENT); // Center logo horizontally
       loginPanel.add(logoContainer);
       loginPanel.add(Box.createVerticalStrut(20)); // Add space between logo and inputs
       loginPanel.add(inputPanel);
       loginPanel.add(Box.createVerticalStrut(20)); // Add space between inputs and buttons
       loginPanel.add(buttonPanel);
       
       mainPanel.add(loginPanel, "Login");
   }

   private static void createMainMenuPanel() {
    JPanel mainMenuPanel = new JPanel(new GridLayout(3, 1, 10, 10));

    JButton addProductButton = new JButton("Add Product to Cart");
    JButton proceedToTransactionButton = new JButton("Proceed to Transaction");
    JButton logoutButton = new JButton("Logout");

    // Action listener for adding a product to the cart
    addProductButton.addActionListener(new ActionListener() {
          @Override
          public void actionPerformed(ActionEvent e) {
              showCard("AddProduct");
          }
      });

    // Action listener for proceeding to the transaction
    proceedToTransactionButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                cardLayout.show(mainPanel, "Transaction");
                displayCart(selectedProducts, checkBoxes);
            }
        });

    // Action listener for logging out
    logoutButton.addActionListener(new ActionListener() {
        @Override
        public void actionPerformed(ActionEvent e) {
            currentUsername = null;
            clearTransactionFields(); // Clear any transaction-related data
            cardLayout.show(mainPanel, "Login"); // Return to the login screen
        }
    });

    mainMenuPanel.add(addProductButton);
    mainMenuPanel.add(proceedToTransactionButton);
    mainMenuPanel.add(logoutButton);

    mainPanel.add(mainMenuPanel, "MainMenu");
}

   private static void createAddProductPanel() {
    JPanel addProductPanel = new JPanel(new GridLayout(6, 2, 10, 10));

    JLabel productCodeLabel = new JLabel("Product Code:");
    JTextField productCodeField = new JTextField();

    JLabel descriptionLabel = new JLabel("Description:");
    JTextField descriptionField = new JTextField();

    JLabel priceLabel = new JLabel("Price:");
    JTextField priceField = new JTextField();

    JLabel quantityLabel = new JLabel("Quantity:");
    JTextField quantityField = new JTextField();

    JButton addToCartButton = new JButton("Add to Cart");
    JButton backButton = new JButton("Back");
    JButton clearButton = new JButton("Clear");

    addToCartButton.addActionListener(e -> {
        String productCode = productCodeField.getText();
        String description = descriptionField.getText();
        String price = priceField.getText();
        String quantity = quantityField.getText();

        if (productCode.isEmpty() || description.isEmpty() || price.isEmpty() || quantity.isEmpty()) {
            JOptionPane.showMessageDialog(mainFrame, "Please fill in all fields.");
        } else {
            double productPrice = Double.parseDouble(price);
            int productQuantity = Integer.parseInt(quantity);

            String productInfo = productCode + "," + description + "," + price + "," + quantity;

            cartProducts.add(productInfo); // Add product to the cart

            JOptionPane.showMessageDialog(mainFrame, "Product added to cart:\n" + productInfo);

            if (isCurrentPanel("Transaction")) {
                addToSelectedProducts(productInfo);
                updateTransactionPanel();
            }
        }
    });

    backButton.addActionListener(e -> showCard("MainMenu"));

    clearButton.addActionListener(e -> {
        // Clear all text fields
        productCodeField.setText("");
        descriptionField.setText("");
        priceField.setText("");
        quantityField.setText("");
    });

    // Add components to the addProductPanel
    addProductPanel.add(productCodeLabel);
    addProductPanel.add(productCodeField);
    addProductPanel.add(descriptionLabel);
    addProductPanel.add(descriptionField);
    addProductPanel.add(priceLabel);
    addProductPanel.add(priceField);
    addProductPanel.add(quantityLabel);
    addProductPanel.add(quantityField);
    addProductPanel.add(addToCartButton);
    addProductPanel.add(backButton);
    addProductPanel.add(clearButton);

    mainPanel.add(addProductPanel, "AddProduct");
}

   private static boolean isTransactionPanelVisible() {
       for (Component comp : mainPanel.getComponents()) {
           if (comp.isVisible() && comp.getName() != null && comp.getName().equals("Transaction")) {
               return true;
           }
       }
       return false;
   }

    
    // Method to save product info to file
      private static void saveProductToFile(String productInfo) {
          try (BufferedWriter writer = new BufferedWriter(new FileWriter(PRODUCTS_FILE_PATH, true))) {
              writer.write(productInfo);
              writer.newLine();
          } catch (IOException ex) {
              ex.printStackTrace();
              // Handle file writing exceptions
          }
}

    private static void createRegistrationPanel() {
       JPanel registrationPanel = new JPanel(new GridLayout(8, 2, 10, 10));

       JLabel usernameLabel = new JLabel("Username:");
       JTextField usernameField = new JTextField();
   
       JLabel fullNameLabel = new JLabel("Full Name:");
       JTextField fullNameField = new JTextField();
   
       JLabel birthdateLabel = new JLabel("Birthdate (MM/DD/YYYY):");
       JTextField birthdateField = new JTextField();
   
       JLabel genderLabel = new JLabel("Gender:");
       String[] genders = {"Male", "Female", "Other"};
       JComboBox<String> genderComboBox = new JComboBox<>(genders);
   
       JLabel addressLabel = new JLabel("Address:");
       JTextField addressField = new JTextField();
   
       JLabel passwordLabel = new JLabel("Password:");
       JPasswordField passwordField = new JPasswordField();
   
       JLabel confirmPasswordLabel = new JLabel("Confirm Password:");
       JPasswordField confirmPasswordField = new JPasswordField();
   
       JButton registerButton = new JButton("Register");
   
       registerButton.addActionListener(new ActionListener() {
          @Override
          public void actionPerformed(ActionEvent e) {
              String username = usernameField.getText();
              String fullName = fullNameField.getText();
              String birthdate = birthdateField.getText();
              String gender = (String) genderComboBox.getSelectedItem();
              String address = addressField.getText();
              String password = new String(passwordField.getPassword());
              String confirmPassword = new String(confirmPasswordField.getPassword());
      
              if (username.isEmpty() || fullName.isEmpty() || password.isEmpty() || confirmPassword.isEmpty()) {
                  JOptionPane.showMessageDialog(mainFrame, "Please fill in all required fields.");
              } else if (!password.equals(confirmPassword)) {
                  JOptionPane.showMessageDialog(mainFrame, "Passwords do not match.");
              } else {
                  String userData = username + "," + password;
      
                  try (BufferedWriter writer = new BufferedWriter(new FileWriter(USERS_FILE_PATH, true))) {
                      writer.write(userData);
                      writer.newLine();
                      JOptionPane.showMessageDialog(mainFrame, "Registration successful!");
                      cardLayout.show(mainPanel, "Login");
                  } catch (IOException ex) {
                      ex.printStackTrace();
                      JOptionPane.showMessageDialog(mainFrame, "Error registering user. Please try again.");
                  }
              }
          }
      });
   
       registrationPanel.add(usernameLabel);
       registrationPanel.add(usernameField);
       registrationPanel.add(fullNameLabel);
       registrationPanel.add(fullNameField);
       registrationPanel.add(birthdateLabel);
       registrationPanel.add(birthdateField);
       registrationPanel.add(genderLabel);
       registrationPanel.add(genderComboBox);
       registrationPanel.add(addressLabel);
       registrationPanel.add(addressField);
       registrationPanel.add(passwordLabel);
       registrationPanel.add(passwordField);
       registrationPanel.add(confirmPasswordLabel);
       registrationPanel.add(confirmPasswordField);
       registrationPanel.add(new JLabel()); // Empty label for spacing
       registrationPanel.add(registerButton);
   
       mainPanel.add(registrationPanel, "Register");
   }

    private static boolean authenticateUser(String username, String password) {
       try (BufferedReader br = new BufferedReader(new FileReader(USERS_FILE_PATH))) {
           String line;
           while ((line = br.readLine()) != null) {
               String[] userData = line.split(",");
               String storedUsername = userData[0];
               String storedPassword = userData[1];
   
               // Check if the provided username and password match
               if (username.equals(storedUsername) && password.equals(storedPassword)) {
                   return true; // User authenticated
               }
           }
       } catch (IOException e) {
           e.printStackTrace();
           // Handle file reading exceptions
       }
       return false; // User not authenticated
   }
    
    private static void clearTransactionFields() {
       // Clear the text fields or reset any transaction-related data
       transactionIdField.setText("");
       fullNameField.setText("");
       totalPriceField.setText("");
   }
   
    private static double calculateTotalPrice(List<String> selectedProducts) {
    double totalPrice = 0.0;
    for (String product : selectedProducts) {
        String[] productDetails = product.split(",");
        if (productDetails.length >= 4) {
            try {
                double price = Double.parseDouble(productDetails[2]);
                int quantity = Integer.parseInt(productDetails[3]);
                totalPrice += price * quantity;
            } catch (NumberFormatException | IndexOutOfBoundsException e) {
                e.printStackTrace(); // Handle the exception as needed
            }
        }
    }
    return totalPrice;
}
   
   private static void displayCart(List<String> products, List<JCheckBox> checkBoxes) {
    checkBoxPanel.removeAll(); // Clear the panel before displaying new products
    checkBoxes.clear(); // Clear the list of checkboxes

    for (String product : products) {
        String[] productDetails = product.split(",");
        String productInfo = String.format(
                "Product Code: %s\nDescription: %s\nPrice: %.2f\nQuantity: %d",
                productDetails[0], productDetails[1], Double.parseDouble(productDetails[2]), Integer.parseInt(productDetails[3])
        );
        JCheckBox checkBox = new JCheckBox(productInfo);
        checkBoxes.add(checkBox);
        checkBoxPanel.add(checkBox);

        checkBox.addActionListener(e -> {
            if (checkBox.isSelected()) {
                addToSelectedProducts(product);
            } else {
                removeFromSelectedProducts(product);
            }
        });
    }

    // Revalidate and repaint the panel to update the UI
    checkBoxPanel.revalidate();
    checkBoxPanel.repaint();
}

    private static String generateRandomID() {
       // Generate a random ID using UUID
       return UUID.randomUUID().toString();
   }
    
    private static void createTransactionPanel() {
          JPanel transactionPanel = new JPanel(new BorderLayout(10, 10));
          transactionPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));
          Font labelFont = new Font("Arial", Font.BOLD, 14);
          
          checkBoxPanel = new JPanel(); 
          checkBoxPanel.setLayout(new GridLayout(0, 1));
          checkBoxScrollPane = new JScrollPane(checkBoxPanel); 
      
          JLabel transactionIdLabel = new JLabel("Transaction ID:");
          JTextField transactionIdField = new JTextField(); // Create transactionIdField
          JLabel fullNameLabel = new JLabel("Full Name:");
          JTextField fullNameField = new JTextField(); // Create fullNameField
          JLabel totalPriceLabel = new JLabel("Total Price:");
          JTextField totalPriceField = new JTextField(); // Create totalPriceField
          JButton goBackButton = new JButton("Go Back");
          JButton processTransactionButton = new JButton("Process Transaction");
          JScrollPane checkBoxScrollPane = new JScrollPane(); // Create checkBoxScrollPane
          JButton resetTransactionButton = new JButton("Reset Transaction");
      
          processTransactionButton.addActionListener(e -> {
              String transactionID = generateRandomID();
              int customerID = getCustomerID(currentUsername);
              double totalPrice = calculateTotalPrice(selectedProducts);
      
              transactionIdField.setText(transactionID);
              fullNameField.setText(currentUsername);
              totalPriceField.setText(Double.toString(totalPrice));
      
              displayReceipt(transactionID, Integer.toString(customerID), selectedProducts, totalPrice);
          });
          
          goBackButton.addActionListener(e -> {
              clearTransactionFields();
              showCard("MainMenu");
          });
      
          resetTransactionButton.addActionListener(e -> {
             clearTransactionFields();
             displayCart(allProducts, checkBoxes); // Update the transaction panel with all products
         });
        transactionPanel.setBackground(new Color(255, 236, 214));
        transactionPanel.add(transactionIdLabel);
        transactionPanel.add(transactionIdField);
        transactionPanel.add(fullNameLabel);
        transactionPanel.add(fullNameField);
        transactionPanel.add(totalPriceLabel);
        transactionPanel.add(totalPriceField);
        transactionPanel.add(goBackButton, BorderLayout.WEST); // Add the back button to the left side
        transactionPanel.add(processTransactionButton, BorderLayout.EAST); // Add process transaction button to the right side
        transactionPanel.add(checkBoxScrollPane, BorderLayout.CENTER);
        transactionPanel.add(resetTransactionButton, BorderLayout.SOUTH); // Adjust placement

        mainPanel.add(transactionPanel, "Transaction");
    }
    
    private static void addToSelectedProducts(String productInfo) {
       selectedProducts.add(productInfo);
   }
   
   private static void removeFromSelectedProducts(String productInfo) {
       selectedProducts.remove(productInfo);
   }
   
   private static void updateTransactionPanel() {
       if (isCurrentPanel("Transaction")) {
           displayCart(selectedProducts, checkBoxes);
       }
   }
   
   private static void displayConfirmedProducts(List<String> confirmedProducts) {
       JOptionPane.showMessageDialog(mainFrame, "Confirmed Products:\n" + String.join("\n", confirmedProducts));
   }
   
   private static void displayReceipt(String transactionID, String customerID, List<String> selectedProducts, double totalPrice) {
    JFrame receiptFrame = new JFrame("Receipt");
    receiptFrame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    receiptFrame.setSize(400, 300);
    receiptFrame.setLocationRelativeTo(null);

    JPanel receiptPanel = new JPanel(new GridLayout(5, 1));
    receiptPanel.setBorder(BorderFactory.createEmptyBorder(20, 20, 20, 20));

    JLabel transactionIdLabel = new JLabel("Transaction ID: " + transactionID);
    JLabel customerIdLabel = new JLabel("Customer ID: " + customerID);

    JTextArea productsTextArea = new JTextArea("Products Purchased:\n");
    for (String product : selectedProducts) {
        productsTextArea.append(product + "\n");
    }
    productsTextArea.setEditable(false);

    JLabel totalPriceLabel = new JLabel("Total Price: " + totalPrice);

    JButton closeButton = new JButton("Close");
    closeButton.addActionListener(event -> receiptFrame.dispose());

    receiptPanel.add(transactionIdLabel);
    receiptPanel.add(customerIdLabel);
    receiptPanel.add(productsTextArea);
    receiptPanel.add(totalPriceLabel);
    receiptPanel.add(closeButton);

    JScrollPane scrollPane = new JScrollPane(receiptPanel); // Encapsulate the receiptPanel within a JScrollPane
    receiptFrame.add(scrollPane);
    receiptFrame.setVisible(true);
}


    // adds users to the list upon registration
   private static void registerUser(String username) {
       registeredUsers.add(username);
   }
   
   // Method to get customer ID based on username
   private static int getCustomerID(String username) {
       // Check if the provided username exists in the list of registered users
       // If found, return its index + 1 (assuming IDs start from 1)
       int index = registeredUsers.indexOf(username);
       if (index != -1) {
           return index + 1;
       }
       // Return 0 if the username is not found (or any other indicator that suits your system)
       return 0; // Or handle this case based on your requirements
   }
   // Add this method outside of any existing method

   private static List<String> getConfirmedProducts(List<JCheckBox> checkBoxes) {
    List<String> confirmedProducts = new ArrayList<>();
    for (JCheckBox checkBox : checkBoxes) {
        if (checkBox.isSelected()) {
            confirmedProducts.add(checkBox.getText());
        }
    }
    return confirmedProducts;
}


}
